name: Build and Release Sample Artifacts

on:
  push:
    branches: [feat/zip-script] # change to 'main' for production
    paths:
      - '*/*/release-config.yml'
      - '*/**'
      - '!.github/**'             
      - '!*.md'                   
      - '!LICENSE'
      - '!.gitignore'
      - '.github/workflows/create-sample-releases.yml'
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force rebuild all artifacts'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  actions: read

jobs:
  build-artifacts:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Create artifacts directory
      run: mkdir -p artifacts
      
    - name: Find and validate release configurations
      run: |
        echo "üîç Finding release configurations..."
        
        RELEASE_CONFIGS=$(find . -name "release-config.yml" -not -path "./.git/*" | sort)
        
        if [ -z "$RELEASE_CONFIGS" ]; then
          echo "‚ùå No release-config.yml files found!"
          echo "üìÇ Available directories:"
          find . -type d -maxdepth 3 | head -20
          exit 1
        fi
        
        echo "‚úÖ Found release configurations:"
        echo "$RELEASE_CONFIGS"
        
        # Validate each config file
        for config_file in $RELEASE_CONFIGS; do
          echo "üìÑ Validating: $config_file"
          
          # Check if it has required fields and included: true
          if grep -q "^category:" "$config_file" && grep -q "^framework:" "$config_file"; then
            INCLUDED=$(grep "^included:" "$config_file" | sed 's/included: *//' | tr -d ' ')
            if [ "$INCLUDED" = "true" ]; then
              echo "  ‚úÖ Valid configuration (included: true)"
            else
              echo "  ‚è≠Ô∏è  Skipping (included: $INCLUDED)"
            fi
          else
            echo "  ‚ùå Missing required fields (category, framework) in $config_file"
            exit 1
          fi
        done

    - name: Check if changed files are in configured directories
      run: |
        echo "üîç Checking if changes affect configured quickstarts..."
        
        # Get list of directories with release-config.yml
        CONFIG_DIRS=$(find . -name "release-config.yml" -not -path "./.git/*" -exec dirname {} \; | sort)
        
        echo "üìÇ Directories with release-config.yml:"
        echo "$CONFIG_DIRS"
        
        # If this is a manual trigger, rebuild all
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "üîÑ Manual trigger - will rebuild all configured samples"
          echo "SHOULD_BUILD=true" >> $GITHUB_ENV
          exit 0
        fi
        
        # Check if any changed files are in directories with release-config.yml
        CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD 2>/dev/null || echo "")
        
        if [ -z "$CHANGED_FILES" ]; then
          echo "üìù No changed files detected, building all"
          echo "SHOULD_BUILD=true" >> $GITHUB_ENV
          exit 0
        fi
        
        echo "üìù Changed files:"
        echo "$CHANGED_FILES"
        
        SHOULD_BUILD=false
        
        for config_dir in $CONFIG_DIRS; do
          # Remove leading ./
          clean_dir=$(echo "$config_dir" | sed 's|^\./||')
          
          # Check if any changed file is in this directory
          if echo "$CHANGED_FILES" | grep -q "^$clean_dir/"; then
            echo "‚úÖ Changes detected in configured directory: $clean_dir"
            SHOULD_BUILD=true
            break
          fi
        done
        
        if [ "$SHOULD_BUILD" = "true" ]; then
          echo "üîÑ Will rebuild artifacts (changes in configured directories)"
          echo "SHOULD_BUILD=true" >> $GITHUB_ENV
        else
          echo "‚è≠Ô∏è  No changes in configured directories, skipping build"
          echo "SHOULD_BUILD=false" >> $GITHUB_ENV
        fi

    - name: Build quickstart packages from configs
      if: env.SHOULD_BUILD == 'true'
      run: |
        echo "üì¶ Building sample packages from configurations..."
        
        # Store the absolute path to artifacts directory
        ARTIFACTS_DIR="$(pwd)/artifacts"
        
        find . -name "release-config.yml" -not -path "./.git/*" | while read config_file; do
          sample_dir=$(dirname "$config_file")
          
          echo "üî® Processing: $config_file"
          cd "$sample_dir"
          
          # Check if this sample should be included
          INCLUDED=$(grep "^included:" release-config.yml | sed 's/included: *//' | tr -d ' ')
          if [ "$INCLUDED" != "true" ]; then
            echo "‚è≠Ô∏è  Skipping (included: $INCLUDED)"
            cd - > /dev/null
            continue
          fi
          
          # Extract configuration using basic shell parsing
          CATEGORY=$(grep "^category:" release-config.yml | sed 's/category: *"//' | sed 's/"$//' | tr -d ' ')
          FRAMEWORK=$(grep "^framework:" release-config.yml | sed 's/framework: *"//' | sed 's/"$//' | tr -d ' ')
          
          if [ -z "$CATEGORY" ] || [ -z "$FRAMEWORK" ]; then
            echo "‚ùå Missing category or framework in $config_file"
            cd - > /dev/null
            continue
          fi
          
          # Build zip filename from category and framework
          ZIP_FILENAME="${CATEGORY}-${FRAMEWORK}-sample"
          
          echo "üì¶ Building: $ZIP_FILENAME.zip"
          echo "üè∑Ô∏è  Category: $CATEGORY, Framework: $FRAMEWORK"
          echo "üìÅ Current directory: $(pwd)"
          echo "üìÅ Artifacts directory: $ARTIFACTS_DIR"
          
          # Create zip with absolute path to artifacts directory
          zip -r "${ARTIFACTS_DIR}/${ZIP_FILENAME}.zip" . \
            --exclude=".git/*" \
            --exclude="node_modules/*" \
            --exclude="__pycache__/*" \
            --exclude="*.pyc" \
            --exclude="*.pyo" \
            --exclude="dist/*" \
            --exclude="build/*" \
            --exclude="venv/*" \
            --exclude=".venv/*" \
            --exclude=".pytest_cache/*" \
            --exclude=".coverage" \
            --exclude="coverage/*" \
            --exclude="*.log" \
            --exclude=".DS_Store" \
            --exclude="Thumbs.db" \
            --exclude=".idea/*" \
            --exclude=".vscode/*" \
            --exclude="temp/*" \
            --exclude="tmp/*" \
            --exclude="*.tmp" \
            --exclude=".cache/*" \
            --exclude=".next/*" \
            --exclude="target/*" \
            --exclude=".gradle/*" \
            --exclude="bin/*" \
            --exclude="obj/*" \
            --exclude=".env" \
            --exclude=".env.local" \
            --exclude=".env.production" \
            --exclude=".env.development"
          
          # Add custom exclusions from config if they exist
          if grep -q "^exclude_patterns:" release-config.yml; then
            echo "üìã Adding custom exclusions from config..."
            
            # Create a temporary zip with custom exclusions
            TEMP_ZIP="${ARTIFACTS_DIR}/temp_${ZIP_FILENAME}.zip"
            mv "${ARTIFACTS_DIR}/${ZIP_FILENAME}.zip" "$TEMP_ZIP"
            
            # Extract and re-zip with custom exclusions
            mkdir -p temp_extract
            cd temp_extract
            unzip -q "$TEMP_ZIP"
            
            # Apply custom exclusions
            while IFS= read -r line; do
              if echo "$line" | grep -q "^  - "; then
                pattern=$(echo "$line" | sed 's/^  - "//' | sed 's/"$//' | tr -d ' ')
                if [ ! -z "$pattern" ]; then
                  echo "   Excluding custom pattern: $pattern"
                  find . -name "$pattern" -delete 2>/dev/null || true
                fi
              fi
            done < <(grep -A 20 "^exclude_patterns:" ../release-config.yml)
            
            # Re-create zip with absolute path
            zip -r "${ARTIFACTS_DIR}/${ZIP_FILENAME}.zip" .
            cd ..
            rm -rf temp_extract "$TEMP_ZIP"
          fi
          
          cd - > /dev/null
          
          if [ -f "${ARTIFACTS_DIR}/${ZIP_FILENAME}.zip" ]; then
            SIZE=$(du -h "${ARTIFACTS_DIR}/${ZIP_FILENAME}.zip" | cut -f1)
            echo "‚úÖ Created: ${ZIP_FILENAME}.zip ($SIZE)"
          else
            echo "‚ùå Failed to create: ${ZIP_FILENAME}.zip"
          fi
        done
        
        # Count artifacts AFTER the loop completes
        ARTIFACT_COUNT=$(ls artifacts/*.zip 2>/dev/null | wc -l)
        echo "ARTIFACT_COUNT=$ARTIFACT_COUNT" >> $GITHUB_ENV
        echo "üìä Total artifacts built: $ARTIFACT_COUNT"
        
        # Debug: List what was actually created
        echo "üì¶ Artifacts created:"
        ls -la artifacts/ || echo "No artifacts directory or files found"
        
    - name: Security scan artifacts
      if: env.SHOULD_BUILD == 'true'
      run: |
        echo "üîç Performing security checks on artifacts..."
        
        for zip_file in artifacts/*.zip; do
          if [ -f "$zip_file" ]; then
            echo "Scanning: $(basename "$zip_file")"
            
            # Check for actual sensitive files (not config examples)
            SENSITIVE_FILES=$(unzip -l "$zip_file" 2>/dev/null | grep -E "\.(key|pem|p12|pfx)$|/\.env$|\.env\.(local|production|development)$|secret\." | grep -v -E "\.(example|sample|template)" || true)
            
            if [ ! -z "$SENSITIVE_FILES" ]; then
              echo "‚ö†Ô∏è  Warning: Potential sensitive files in $(basename "$zip_file"):"
              echo "$SENSITIVE_FILES"
            else
              echo "‚úÖ No sensitive files detected"
            fi
          fi
        done
        
    - name: Generate release notes
      if: env.SHOULD_BUILD == 'true'
      run: |
        echo "üìù Generating release notes..."
        
        cat > release_notes.md << EOF
        # Auth0 AI Sample Artifacts - Latest
        
        This release contains the latest version of sample applications for various frameworks and quickstarts. See Assets below for downloadable zip files of each quickstart.
        
        For more information, visit [auth0.com/ai/docs](https://auth0.com/ai/docs).
        
        ---
        **Generated:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')
        EOF
        
    - name: Delete previous 'latest' release
      if: env.SHOULD_BUILD == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "üóëÔ∏è  Cleaning up previous 'latest' release..."
        
        # Delete previous latest release (ignore errors if doesn't exist)
        gh release delete latest --yes 2>/dev/null || echo "No previous 'latest' release found"
        git push origin :refs/tags/latest 2>/dev/null || echo "No previous 'latest' tag found"
    
    - name: Create test release (not latest)
      if: env.SHOULD_BUILD == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "üöÄ Creating test release..."
        
        if [ "$ARTIFACT_COUNT" -eq 0 ]; then
          echo "‚ùå No artifacts to release!"
          exit 1
        fi
        
        # Create test release instead of "latest" to avoid conflicts
        TIMESTAMP=$(date +%Y%m%d-%H%M%S)
        RELEASE_TAG="test-feat-zip-script-${TIMESTAMP}"
        
        echo "üì¶ Creating test release: $RELEASE_TAG"
        
        # Create test release (not latest)
        gh release create "$RELEASE_TAG" \
          --title "Test Release - feat/zip-script" \
          --notes-file release_notes.md \
          --prerelease \
          artifacts/*.zip
          
        echo "‚úÖ Test release created!"
        echo "üîó Test download URLs:"
        
        for zip_file in artifacts/*.zip; do
          if [ -f "$zip_file" ]; then
            FILENAME=$(basename "$zip_file")
            echo "   https://github.com/${{ github.repository }}/releases/download/$RELEASE_TAG/$FILENAME"
          fi
        done
        
        echo ""
        echo "üß™ This is a test release. Official releases coming soon"

    # - name: Create 'latest' release (for production)
    #   if: env.SHOULD_BUILD == 'true'
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   run: |
    #     echo "üöÄ Creating 'latest' release..."
        
    #     if [ "$ARTIFACT_COUNT" -eq 0 ]; then
    #       echo "‚ùå No artifacts to release!"
    #       exit 1
    #     fi
        
    #     echo "üì¶ Releasing $ARTIFACT_COUNT artifacts"
        
    #     # Create the latest release that your download button expects
    #     gh release create latest \
    #       --title "Auth0 AI Samples - Latest" \
    #       --notes-file release_notes.md \
    #       --latest \
    #       artifacts/*.zip
          
    #     echo "‚úÖ Latest release created!"
    #     echo "üîó Your download URLs are now active:"
        
    #     for zip_file in artifacts/*.zip; do
    #       if [ -f "$zip_file" ]; then
    #         FILENAME=$(basename "$zip_file")
    #         echo "   https://github.com/${{ github.repository }}/releases/latest/download/$FILENAME"
    #       fi
    #     done

    - name: Skip build notification
      if: env.SHOULD_BUILD == 'false'
      run: |
        echo "‚è≠Ô∏è  Build skipped - no changes in directories with release-config.yml files"
        echo "üí° To force a rebuild, use the manual workflow trigger"